#ifndef EVALUATOR_H
#define EVALUATOR_H

#include <array>

#include "../util/global.hpp"

#define QUEEN_VALUE 900
#define ROOK_VALUE 500
#define BISHOP_VALUE 320
#define KNIGHT_VALUE 300
#define PAWN_VALUE 100

// clang-format off
// Pawn Piece-Square Tables
constexpr int white_pawn_psq[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    50, 50, 50, 50, 50, 50, 50, 50,
    10, 10, 20, 30, 30, 20, 10, 10,
    5, 5, 10, 25, 25, 10, 5, 5,
    0, 0, 0, 20, 20, 0, 0, 0,
    5, -5, -10, 0, 0, -10, -5, 5,
    5, 10, 10, -20, -20, 10, 10, 5,
    0, 0, 0, 0, 0, 0, 0, 0
};

constexpr int black_pawn_psq[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    5, 10, 10, -20, -20, 10, 10, 5,
    5, -5, -10, 0, 0, -10, -5, 5,
    0, 0, 0, 20, 20, 0, 0, 0,
    5, 5, 10, 25, 25, 10, 5, 5,
    10, 10, 20, 30, 30, 20, 10, 10,
    50, 50, 50, 50, 50, 50, 50, 50,
    0, 0, 0, 0, 0, 0, 0, 0
};

// Knight Piece-Square Tables
constexpr int white_knight_psq[] = {
    -50, -40, -30, -30, -30, -30, -40, -50,
    -40, -20, 0, 5, 5, 0, -20, -40,
    -30, 5, 10, 15, 15, 10, 5, -30,
    -30, 0, 15, 20, 20, 15, 0, -30,
    -30, 5, 15, 20, 20, 15, 5, -30,
    -30, 0, 10, 15, 15, 10, 0, -30,
    -40, -20, 0, 0, 0, 0, -20, -40,
    -50, -40, -30, -30, -30, -30, -40, -50
};

constexpr int black_knight_psq[64] = {
    -50, -40, -30, -30, -30, -30, -40, -50,
    -40, -20,   0,   5,   5,   0, -20, -40,
    -30,   5,  10,  15,  15,  10,   5, -30,
    -30,   0,  15,  20,  20,  15,   0, -30,
    -30,   5,  15,  20,  20,  15,   5, -30,
    -30,   0,  10,  15,  15,  10,   0, -30,
    -40, -20,   0,   0,   0,   0, -20, -40,
    -50, -40, -30, -30, -30, -30, -40, -50,
};

constexpr int black_bishop_psq[64] = {
    -30, -20, -20, -20, -20, -20, -20, -30,
    -20,  10,   0,   0,   0,   0,  10, -20,
    -20,   0,  10,  10,  10,  10,   0, -20,
    -20,   0,  10,  10,  10,  10,   0, -20,
    -20,   0,  10,  10,  10,  10,   0, -20,
    -20,   0,  10,  10,  10,  10,   0, -20,
    -20,  10,   0,   0,   0,   0,  10, -20,
    -30, -20, -20, -20, -20, -20, -20, -30,
};

// constexpr int black_rook_psq[64] = {
//      15,  10,  10,  10,  10,  10,  10,  15,
//      20,  20,  10,  10,  10,  10,  20,  20,
//      -5,   0,   0,   0,   0,   0,   0,  -5,
//      -5,   0,   0,   0,   0,   0,   0,  -5,
//      -5,   0,   0,   0,   0,   0,   0,  -5,
//      -5,   0,   0,   0,   0,   0,   0,  -5,
//      -5,   0,   0,   0,   0,   0,   0,  -5,
//      10,  20,  20
// };

// clang-format on

constexpr std::array<int, 64> pawn_square_value = {};

int evaluate_position(Position* position);

#endif